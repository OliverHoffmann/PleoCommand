<project name="PleoCommand" default="build" basedir=".">

	<property name="verb" value="no" />

	<property name="src" location="src" />
	<property name="bin" location="bin" />
	<property name="ext" location="ext" />
	<property name="dist" location="dist" />

	<property name="test" location="${src}/test" />
	<property name="lib" location="${bin}/lib" />
	<property name="extPreBuild" location="${ext}/prebuild" />
	<property name="extBuild" location="${ext}/build" />
	<property name="extRT" location="${ext}/rt" />
	<property name="extDev" location="${ext}/dev" />

	<property name="mainclass" value="pleocmd.Main" />
	<property name="classpath" value="${lib}/RXTXcomm.jar:${lib}/junit.jar" />

	<!-- Cleans bin/ and dist/ diretory but keep downloads -->
	<target name="clean">
		<delete includeEmptyDirs="true" failonerror="false" verbose="${verb}">
			<fileset dir="${bin}" />
			<fileset dir="${dist}" />
		</delete>
		<echo message="Downloaded external files are not deleted. 'ant mrproper' cleans all." />
	</target>

	<!-- Cleans bin/ and dist/ diretory completely -->
	<target name="mrproper">
		<delete includeEmptyDirs="true" failonerror="false" verbose="${verb}">
			<fileset dir="${bin}" />
			<fileset dir="${ext}" />
			<fileset dir="${dist}" />
		</delete>
	</target>

	<macrodef name="download">
		<attribute name="src" />
		<attribute name="dest" />
		<attribute name="md5" />
		<attribute name="user" default="" />
		<attribute name="password" default="" />
		<attribute name="ignoreerrors" default="true" />
		<sequential>
			<get src="@{src}"
			     dest="@{dest}"
			     verbose="${verb}"
			     skipexisting="true"
			     username="@{user}"
			     password="@{password}"
			     ignoreerrors="@{ignoreerrors}" />
			<touch file="@{dest}" />
			<checksum file="@{dest}"
			          property="@{md5}"
			          verifyproperty="csverify" />
			<condition property="csbad">
				<and>
					<equals arg1="${csverify}" arg2="false" />
					<equals arg1="@{ignoreerrors}" arg2="false" />
				</and>
			</condition>
			<fail if="csbad" message="Checksum of @{dest} is bad." />
		</sequential>
	</macrodef>

	<!-- Downloads prebuild and build files needed for build and dist targets -->
	<target name="download-build">
		<mkdir dir="${bin}" />
		<mkdir dir="${ext}" />
		<mkdir dir="${extPreBuild}" />
		<mkdir dir="${extBuild}" />

		<echo message="Downloading files needed for pre-building" />

		<download src="http://javadl.sun.com/webapps/download/AutoDL?BundleId=39494"
		          dest="${extPreBuild}/jre-6u20-windows-i586-s.exe"
		          md5="71fdde020a4920f55c96e1121a1dbd4a"
		          ignoreerrors="false" />

		<download src="http://mirror.netcologne.de/apache.org/ant/binaries/apache-ant-1.8.0-bin.zip"
		          dest="${extPreBuild}/apache-ant-1.8.0-bin.zip"
		          md5="c9eaa7b72e728a40ca748ff8e1fc6869"
		          ignoreerrors="false" />

		<echo message="Downloading files needed for building" />

		<download src="http://rxtx.qbang.org/pub/rxtx/rxtx-2.1-7-bins-r2.zip"
		          dest="${extBuild}/rxtx-2.1-7-bins-r2.zip"
		          md5="5f21ae633602a24fd3cdd096951476c2" />

		<download src="http://cloud.github.com/downloads/KentBeck/junit/junit-4.8.2.jar"
		          dest="${extBuild}/junit-4.8.2.jar"
		          md5="8a498c3d820db50cc7255d8c46c1ebd1" />

		<download src="http://switch.dl.sourceforge.net/project/checkstyle/checkstyle/5.1/checkstyle-5.1.zip"
		          dest="${extBuild}/checkstyle-5.1.zip"
		          md5="f80d1904b275080edcfc31d57ddad188" />

		<download src="http://heanet.dl.sourceforge.net/project/jsmooth/jsmooth/0.9.9-7/jsmooth-0.9.9-7.zip"
		          dest="${extBuild}/jsmooth-0.9.9-7.zip"
		          md5="af31eeda7d5f199c0eb5162f96a980e6" />

		<download src="http://hamcrest.googlecode.com/files/hamcrest-core-1.1.jar"
		          dest="${extBuild}/hamcrest-core-1.1.jar"
		          md5="447a5c012a4628bf43bcaad31cae3ff2" />

		<download src="http://heanet.dl.sourceforge.net/project/gnuwin32/make/3.81/make-3.81.exe"
		          dest="${extBuild}/make-3.81.exe"
		          md5="8ae51379d1f3eef8360df4e674f17d6d" />

		<download src="http://garr.dl.sourceforge.net/project/gnuwin32/bison/2.4.1/bison-2.4.1-setup.exe"
		          dest="${extBuild}/bison-2.4.1-setup.exe"
		          md5="d24ed4f8a3b156899db96079fb869cbf" />

	</target>

	<!-- Downloads runtime and development files -->
	<target name="download-ext">
		<mkdir dir="${bin}" />
		<mkdir dir="${ext}" />
		<mkdir dir="${extRT}" />
		<mkdir dir="${extDev}" />

		<echo message="Downloading files needed for runtime" />

		<download src="http://bci2000.org/downloads/bin/BCI2000Setup_091110.exe"
		          dest="${extRT}/BCI2000Setup_091110.exe"
		          md5="54198c14540d012c9b403c749bc725cb"
		          user="ascheck"
		          password="eibah7cohB" />

		<download src="http://www.dogsbodynet.com/myskit/downloads/MySkit-v1.3-Installer.exe"
		          dest="${extRT}/MySkit-v1.3-Installer.exe"
		          md5="880a163f157d377ea8fb7bb203e3dbc0" />

		<download src="http://www.pleoworld.com/downloads/PleoSDSoftware_1.1.zip"
		          dest="${extRT}/PleoSDSoftware_1.1.zip"
		          md5="3812d55f0d9d5c88066b9ee16793523f" />

		<echo message="Downloading files needed for development" />

		<download src="http://pearl.plunder.com/x/$1OGj-51GptNM3Uy7aA0CbyFGQfPF0yYW/dd68920451/?/jdk-6u20-windows-i586.exe"
		          dest="${extDev}/jdk-6u20-windows-i586.exe"
		          md5="cd336cbf94b74dacfdd519b1e1c02a3b" />

		<download src="http://mirror.selfnet.de/eclipse/technology/epp/downloads/release/galileo/SR2/eclipse-java-galileo-SR2-win32.zip"
		          dest="${extDev}/eclipse-java-galileo-SR2-win32.zip"
		          md5="9e3048a9f26386130334134f4062232a" />

		<download src="http://www.compuphase.com/pawn/pawn-3.3.4127.package"
		          dest="${extDev}/pawn-3.3.4127.package"
		          md5="0b429bf95ed11762cb5840906b622a8a" />

		<download src="http://www.pleoworld.com/downloads/PleoDevelopmentKit.zip"
		          dest="${extDev}/PleoDevelopmentKit.zip"
		          md5="cfc20448351b6b13c3908f36ca40f5c5" />

		<download src="http://prdownloads.sourceforge.net/int64/tidy-060405-exe.zip?download"
		          dest="${extDev}/tidy-060405-exe.zip"
		          md5="e18dcf00e7b79aa53f7bab51f9e75026" />

		<copy todir="${extRT}"
		      overwrite="true"
		      failonerror="true"
		      verbose="{verb}">
			<fileset dir="${src}/ext/rt">
				<include name="BCI2000-Prog/**" />
			</fileset>
		</copy>

		<copy todir="${extDev}"
		      overwrite="true"
		      failonerror="true"
		      verbose="{verb}">
			<fileset dir="${src}/ext/dev">
				<include name="pawncc/**" />
			</fileset>
		</copy>


	</target>

	<!-- Unzips and moves files needed for build and dist targets -->
	<target name="prepare-build" depends="download-build">
		<mkdir dir="${lib}" />

		<echo message="Unzipping libraries needed for building" />

		<unzip src="${extBuild}/rxtx-2.1-7-bins-r2.zip" dest="${lib}">
			<patternset>
				<include name="**/RXTXcomm.jar" />
				<include name="**/i686-unknown-linux-gnu/librxtxSerial.so" />
				<include name="**/i368-mingw32/rxtxSerial.dll" />
			</patternset>
			<mapper type="flatten" />
		</unzip>

		<unzip src="${extBuild}/checkstyle-5.1.zip" dest="${lib}">
			<patternset>
				<include name="**/checkstyle-all-5.1.jar" />
			</patternset>
			<mapper type="flatten" />
		</unzip>

		<unzip src="${extBuild}/jsmooth-0.9.9-7.zip" dest="${lib}">
			<patternset>
				<include name="**/jsmoothgen-ant.jar" />
			</patternset>
			<mapper type="flatten" />
		</unzip>
		<unzip src="${extBuild}/jsmooth-0.9.9-7.zip" dest="${lib}">
			<patternset>
				<include name="**/skeletons/windowed-wrapper/*" />
			</patternset>
		</unzip>
		<move file="${lib}/jsmooth-0.9.9-7/skeletons"
		      todir="${lib}"
		      overwrite="true"
		      failonerror="true"
		      verbose="${verb}" />
		<delete includeemptydirs="true" failonerror="false" verbose="${verb}">
			<fileset dir="${lib}/jsmooth-0.9.9-7" excludes="**/*" />
		</delete>

		<copy file="${extBuild}/junit-4.8.2.jar"
		      tofile="${lib}/junit.jar"
		      overwrite="true"
		      failonerror="true"
		      verbose="{verb}" />

		<copy file="${extBuild}/hamcrest-core-1.1.jar"
		      tofile="${lib}/hamcrest-core.jar"
		      overwrite="true"
		      failonerror="true"
		      verbose="{verb}" />

	</target>

	<!-- Compiles Java, C and C++ files, checks for errors and dumps subversion log -->
	<target name="build" depends="prepare-build">
		<mkdir dir="${bin}" />

		<copy todir="${bin}"
		      overwrite="true"
		      failonerror="true"
		      verbose="{verb}">
			<fileset dir="${src}">
				<include name="ExpressionParser/**" />
				<include name="TCPIP-Simulator/**" />
			</fileset>
		</copy>

		<javac srcdir="${src}"
		       destdir="${bin}"
		       verbose="${verb}"
		       classpath="${classpath}"
		       includeantruntime="false"
		       excludes="**/*.odg" />

		<taskdef resource="checkstyletask.properties"
		         classpath="${lib}/checkstyle-all-5.1.jar" />
		<checkstyle config="${src}/checkstyle.xml" failonviolation="false">
			<fileset dir="${src}" includes="**/*.java" />
			<fileset dir="${test}" includes="**/*.java" />
			<classpath>
				<pathelement path="${bin}" />
			</classpath>
		</checkstyle>

		<exec executable="svn" failonerror="false">
			<arg value="up" />
			<arg value="--non-interactive" />
		</exec>
		<exec executable="svn"
		      output="${bin}/changelog.xml"
		      failonerror="false">
			<arg value="log" />
			<arg value="-v" />
			<arg value="--xml" />
			<arg value="--non-interactive" />
		</exec>
		<exec executable="make"
		      dir="${bin}/ExpressionParser"
		      failonerror="true"
		      osfamily="unix">
			<arg value="unix" />
		</exec>
		<exec executable="make"
		      dir="${bin}/ExpressionParser"
		      failonerror="true"
		      osfamily="windows">
			<arg value="win" />
		</exec>
		<exec executable="make"
		      dir="${bin}/TCPIP-Simulator"
		      failonerror="true"
		      osfamily="unix">
			<arg value="unix" />
		</exec>
		<exec executable="make"
		      dir="${bin}/TCPIP-Simulator"
		      failonerror="true"
		      osfamily="windows">
			<arg value="win" />
		</exec>
		<exec executable="${src}/tidy-all-html.sh"
		      dir="${basedir}"
		      failonerror="false"
		      osfamily="unix">
			<arg value="${basedir}" />
		</exec>
	</target>

	<!-- Executes all JUnit test cases -->
	<target name="test" depends="dist">
		<junit showoutput="true" failureproperty="testfailed">
			<classpath>
				<pathelement path="${lib}/junit.jar" />
				<pathelement path="${lib}/hamcrest-core.jar" />
				<pathelement path="${bin}" />
			</classpath>
			<formatter type="plain" usefile="false" />
			<batchtest>
				<fileset dir="${src}/test" includes="**/*.java" />
			</batchtest>
		</junit>
		<fail message="At least one JUnit test failed" if="testfailed" />
	</target>

	<!-- Creates Java JAR archive and Windows executable in dist/ -->
	<target name="dist" depends="build, download-ext">
		<mkdir dir="${dist}" />

		<exec executable="xsltproc"
		      output="${dist}/changelog.html"
		      failonerror="false">
			<arg value="svnlog.xsl" />
			<arg value="${bin}/changelog.xml" />
		</exec>

		<taskdef name="jsmoothgen"
		         classname="net.charabia.jsmoothgen.ant.JSmoothGen"
		         classpath="${lib}/jsmoothgen-ant.jar" />
		<property name="jarloc" location="${dist}/${ant.project.name}.jar" />
		<property name="exefile" value="${ant.project.name}.exe" />

		<delete file="${jarloc}" failonerror="true" verbose="${verb}" />
		<jar jarfile="${jarloc}" duplicate="fail" strict="warn">
			<zipfileset dir="${bin}/pleocmd" prefix="pleocmd" />
			<zipfileset src="${lib}/RXTXcomm.jar" />
			<manifest>
				<attribute name="Implementation-Vendor"
				           value="Oliver Hoffmann" />
				<attribute name="Implementation-Title"
				           value="${ant.project.name}" />
				<attribute name="Implementation-Version"
				           value="0.1 @ ${java.vm.name} ${os.name}-${os.version}" />
				<attribute name="Main-Class" value="${mainclass}" />
				<attribute name="Class-Path" value="." />
			</manifest>
		</jar>

		<property name="jsloc" value="${bin}/${ant.project.name}.jsmooth" />
		<echoxml file="${jsloc}">
			<jsmoothproject>
				<skeletonName>Windowed Wrapper</skeletonName>
				<minimumVersion>1.5</minimumVersion>
				<mainClassName>${mainclass}</mainClassName>

				<executableName>${exefile}</executableName>
				<iconLocation>../src/${ant.project.name}.ico</iconLocation>
				<classPath>${classpath}</classPath>

				<embeddedJar>true</embeddedJar>
				<jarLocation>${jarloc}</jarLocation>

				<maximumMemoryHeap>536870912</maximumMemoryHeap>

				<key>Message</key>
				<value>Java is needed. Do you want to download it now?</value>
				<key>URL</key>
				<value>http://www.java.com</value>
				<key>Debug</key>
				<value>0</value>
			</jsmoothproject>
		</echoxml>
		<jsmoothgen skeletonroot="${lib}/skeletons"
		            verbose="${verb}"
		            project="${jsloc}" />

		<copy todir="${dist}"
		      overwrite="true"
		      failonerror="false"
		      verbose="${verb}">
			<fileset file="${src}/pleocommand" />
			<fileset file="${bin}/${exefile}" />
			<fileset file="${lib}/librxtxSerial.so" />
			<fileset file="${lib}/rxtxSerial.dll" />
			<fileset file="${bin}/ExpressionParser/libExprParser.so" />
			<fileset file="${bin}/ExpressionParser/ExprParser.dll" />
		</copy>
		<chmod perm="ugo+rx" failonerror="false" verbose="${verb}">
			<fileset file="${dist}/pleocommand" />
			<fileset file="${dist}/${exefile}" />
			<fileset file="${dist}/librxtxSerial.so" />
			<fileset file="${dist}/libExprParser.so" />
		</chmod>

		<uptodate property="build.linux"
		          srcfile="${bin}/ExpressionParser/libExprParser.so"
		          targetfile="${dist}/libExprParser.so" />
		<uptodate property="build.win"
		          srcfile="${bin}/ExpressionParser/ExprParser.dll"
		          targetfile="${dist}/ExprParser.dll" />
		<fail message="This script has be run again under Linux because some missing files have to be created under Linux."
		      unless="build.linux" />
		<fail message="This script has be run again under Windows because some missing files have to be created under Windows."
		      unless="build.win" />

	</target>

	<target name="rebuild" depends="clean, dist">
	</target>

</project>
