<project name="PleoCommand" default="dist" basedir=".">

	<property name="verb" value="no" />

	<property name="src" location="src" />
	<property name="bin" location="bin" />
	<property name="ext" location="ext" />
	<property name="dist" location="dist" />

	<property name="test" location="${src}/test" />
	<property name="lib" location="${bin}/lib" />
	<property name="extPreBuild" location="${ext}/prebuild" />
	<property name="extBuild" location="${ext}/build" />
	<property name="extRT" location="${ext}/rt" />
	<property name="extDev" location="${ext}/dev" />

	<property name="srcBCISub" value="BCI2000Source" />
	<property name="srcBCI" location="${src}/${srcBCISub}" />
	<property name="binBCI" location="${bin}/${srcBCISub}" />
	<property name="subNexus" value="SignalSource/NexusSource" />
	<property name="subTCPIP" value="Application/PleoCommandTCPIP" />
	<property name="srcBCINexus" location="${srcBCI}/src/contrib/${subNexus}" />
	<property name="binBCINexus" location="${binBCI}/src/contrib/${subNexus}" />
	<property name="srcBCIPleo" location="${srcBCI}/src/contrib/${subTCPIP}" />
	<property name="binBCIPleo" location="${binBCI}/src/contrib/${subTCPIP}" />

	<property name="mainclass" value="pleocmd.Main" />
	<property name="classpath" value="${lib}/RXTXcomm.jar:${lib}/junit.jar" />

	<property name="dlprefix"
	          value="http://www.fileden.com/files/2007/4/27/1021443/" />

	<macrodef name="download">
		<attribute name="src" />
		<attribute name="dest" />
		<attribute name="md5" />
		<attribute name="user" default="" />
		<attribute name="password" default="" />
		<sequential>
			<get src="@{src}"
			     dest="@{dest}"
			     verbose="${verb}"
			     skipexisting="true"
			     username="@{user}"
			     password="@{password}"
			     ignoreerrors="true" />
			<checksum file="@{dest}"
			          property="@{md5}"
			          algorithm="md5"
			          verifyproperty="csverify.@{dest}" />
			<condition property="csbad.@{dest}">
				<equals arg1="${csverify.@{dest}}" arg2="false" />
			</condition>
			<fail if="csbad.@{dest}" message="Checksum of @{dest} is bad." />
			<echo message="Checksum of @{dest} ok" />
		</sequential>
	</macrodef>

	<!-- Downloads build files needed for build and dist targets -->
	<target name="_download-build">
		<mkdir dir="${ext}" />
		<mkdir dir="${extBuild}" />
		<mkdir dir="${extPreBuild}" />

		<echo message="Downloading files needed for building" />

		<download src="${dlprefix}/rxtx-bin.zip"
		          dest="${extBuild}/rxtx-bin.zip"
		          md5="5f21ae633602a24fd3cdd096951476c2" />

		<download src="${dlprefix}/junit.jar"
		          dest="${extBuild}/junit.jar"
		          md5="8a498c3d820db50cc7255d8c46c1ebd1" />

		<download src="${dlprefix}/checkstyle-bin.zip"
		          dest="${extBuild}/checkstyle-bin.zip"
		          md5="f80d1904b275080edcfc31d57ddad188" />

		<download src="${dlprefix}/jsmooth-bin.zip"
		          dest="${extBuild}/jsmooth-bin.zip"
		          md5="af31eeda7d5f199c0eb5162f96a980e6" />

		<download src="${dlprefix}/hamcrest-core.jar"
		          dest="${extBuild}/hamcrest-core.jar"
		          md5="447a5c012a4628bf43bcaad31cae3ff2" />

		<download src="${dlprefix}/coreutils-setup.zip"
		          dest="${extBuild}/coreutils-setup.zip"
		          md5="a70509e7a0a085bb648620ca3bf69b4d" />

		<download src="${dlprefix}/git-setup.zip"
		          dest="${extBuild}/git-setup.zip"
		          md5="f9a619b559319d1be43b2ec1120e342c" />

		<download src="${dlprefix}/gcc-setup.zip"
		          dest="${extBuild}/gcc-setup.zip"
		          md5="be062892a0bcd044b3d1dd4e825a9e94" />

		<download src="${dlprefix}/make-setup.zip"
		          dest="${extBuild}/make-setup.zip"
		          md5="272ca557a3d400ee6b565fa9ff5fc7c0" />

		<download src="${dlprefix}/bison-setup.zip"
		          dest="${extBuild}/bison-setup.zip"
		          md5="291915440a40696be185400cff02c039" />

		<download src="${dlprefix}/BCI2000-source.zip"
		          dest="${extBuild}/BCI2000-source.zip"
		          md5="be3875e3f21eeb58a5f082b6042f9a93" />

		<download src="${dlprefix}/tidy-bin.zip"
		          dest="${extBuild}/tidy-bin.zip"
		          md5="e18dcf00e7b79aa53f7bab51f9e75026" />

		<mkdir dir="${extBuild}/xsltproc/temp" />
		<download src="${dlprefix}/icon.zip"
		          dest="${extBuild}/xsltproc/temp/icon.zip"
		          md5="da5f3164bbd21e7830faef7e5a7ea5e6" />
		<download src="${dlprefix}/libxml2.zip"
		          dest="${extBuild}/xsltproc/temp/libxml2.zip"
		          md5="d7b1f133b286751cdf5a50f39dbb6ddf" />
		<download src="${dlprefix}/libxslt.zip"
		          dest="${extBuild}/xsltproc/temp/libxslt.zip"
		          md5="36fb352ea5b6309305476bcb8cabc31e" />
		<download src="${dlprefix}/zlib.zip"
		          dest="${extBuild}/xsltproc/temp/zlib.zip"
		          md5="61f7b91539b0532eea3c30e3281dc424" />

		<mkdir dir="${extBuild}/xsltproc/bin" />
		<unzip src="${extBuild}/xsltproc/temp/icon.zip"
		       dest="${extBuild}/xsltproc/bin">
			<patternset>
				<include name="**/bin/*.dll" />
			</patternset>
			<mapper type="flatten" />
		</unzip>
		<unzip src="${extBuild}/xsltproc/temp/libxml2.zip"
		       dest="${extBuild}/xsltproc/bin">
			<patternset>
				<include name="**/bin/*.dll" />
			</patternset>
			<mapper type="flatten" />
		</unzip>
		<unzip src="${extBuild}/xsltproc/temp/libxslt.zip"
		       dest="${extBuild}/xsltproc/bin">
			<patternset>
				<include name="**/bin/*.dll" />
				<include name="**/bin/*.exe" />
			</patternset>
			<mapper type="flatten" />
		</unzip>
		<unzip src="${extBuild}/xsltproc/temp/zlib.zip"
		       dest="${extBuild}/xsltproc/bin">
			<patternset>
				<include name="**/bin/*.dll" />
			</patternset>
			<mapper type="flatten" />
		</unzip>

		<chmod perm="ugo+rx" failonerror="false" verbose="${verb}">
			<fileset file="${extPreBuild}/jdk-setup.bin" />
			<fileset file="${extPreBuild}/jdk-setup.exe" />
			<fileset file="${extBuild}/bison-setup.exe" />
			<fileset file="${extBuild}/coreutils-setup.exe" />
			<fileset file="${extBuild}/gcc-setup.exe" />
			<fileset file="${extBuild}/make-setup.exe" />
			<fileset file="${extBuild}/git-setup.exe" />
			<fileset file="${extBuild}/xsltproc/bin/xsltproc.exe" />
		</chmod>

	</target>

	<!-- Downloads runtime and development files -->
	<target name="_download-ext">
		<mkdir dir="${ext}" />
		<mkdir dir="${extRT}" />
		<mkdir dir="${extDev}" />

		<echo message="Downloading files needed for runtime" />

		<download src="${dlprefix}/MySkit-setup.zip"
		          dest="${extRT}/MySkit-setup.zip"
		          md5="5b36b16d3eaf108b57552eeb5780a75c" />

		<download src="${dlprefix}/BCI2000-setup.zip"
		          dest="${extRT}/BCI2000-setup.zip"
		          md5="7917a6d8a4d9108f60462303ae6621d5" />

		<download src="${dlprefix}/PleoSDSoftware_1.1.zip"
		          dest="${extRT}/PleoSDSoftware_1.1.zip"
		          md5="3812d55f0d9d5c88066b9ee16793523f" />

		<copy todir="${extRT}"
		      overwrite="true"
		      preservelastmodified="true"
		      failonerror="true"
		      verbose="{verb}">
			<fileset dir="${src}/ext/rt">
				<include name="BCI2000-Prog/**" />
				<include name="libusb*" />
				<include name="UGOBE*" />
			</fileset>
		</copy>

		<chmod perm="ugo+rx" failonerror="false" verbose="${verb}">
			<fileset file="${extRT}/BCI2000-setup.exe" />
			<fileset file="${extRT}/MySkit-setup.exe" />
		</chmod>

		<echo message="Downloading files needed for development" />

		<download src="${dlprefix}/pawn-setup.package"
		          dest="${extDev}/pawn-setup.package"
		          md5="0b429bf95ed11762cb5840906b622a8a" />

		<download src="${dlprefix}/PleoDevelopmentKit.zip"
		          dest="${extDev}/PleoDevelopmentKit.zip"
		          md5="443033eff235a141842a46cee8847a14" />

		<copy todir="${extDev}"
		      overwrite="true"
		      preservelastmodified="true"
		      failonerror="true"
		      verbose="{verb}">
			<fileset dir="${src}/ext/dev">
				<include name="pawncc/**" />
			</fileset>
		</copy>

		<chmod perm="ugo+rx" failonerror="false" verbose="${verb}">
			<fileset file="${extDev}/pawn-setup.package" />
		</chmod>

	</target>

	<target name="_unzipBCISource" unless="uptodateBCISource">
		<unzip src="${extBuild}/BCI2000-source.zip" dest="${binBCI}" />
		<touch file="${binBCI}/.unpack-timestamp" />
	</target>

	<!-- Unzips and moves files needed for build and dist targets -->
	<target name="_prepare-build" depends="_download-build">
		<mkdir dir="${bin}" />
		<mkdir dir="${lib}" />

		<echo message="Unzipping libraries needed for building" />

		<unzip src="${extBuild}/rxtx-bin.zip" dest="${lib}">
			<patternset>
				<include name="**/RXTXcomm.jar" />
				<include name="**/i686-unknown-linux-gnu/librxtxSerial.so" />
				<include name="**/i368-mingw32/rxtxSerial.dll" />
			</patternset>
			<mapper type="flatten" />
		</unzip>

		<unzip src="${extBuild}/checkstyle-bin.zip" dest="${lib}">
			<patternset>
				<include name="**/checkstyle-all-5.1.jar" />
			</patternset>
			<mapper type="flatten" />
		</unzip>

		<unzip src="${extBuild}/jsmooth-bin.zip" dest="${lib}">
			<patternset>
				<include name="**/jsmoothgen-ant.jar" />
			</patternset>
			<mapper type="flatten" />
		</unzip>
		<unzip src="${extBuild}/jsmooth-bin.zip" dest="${lib}">
			<patternset>
				<include name="**/skeletons/windowed-wrapper/*" />
			</patternset>
		</unzip>
		<move todir="${lib}/skeletons/windowed-wrapper"
		      overwrite="true"
		      flatten="true"
		      failonerror="true"
		      verbose="${verb}">
			<fileset dir="${lib}">
				<include name="jsmooth*/skeletons/windowed-wrapper/**" />
			</fileset>
		</move>

		<copy file="${extBuild}/junit.jar"
		      tofile="${lib}/junit.jar"
		      overwrite="true"
		      preservelastmodified="true"
		      failonerror="true"
		      verbose="{verb}" />

		<copy file="${extBuild}/hamcrest-core.jar"
		      tofile="${lib}/hamcrest-core.jar"
		      overwrite="true"
		      preservelastmodified="true"
		      failonerror="true"
		      verbose="{verb}" />

		<unzip src="${extBuild}/tidy-bin.zip" dest="${bin}" />

		<uptodate property="uptodateBCISource"
		          srcfile="${extBuild}/BCI2000-source.zip"
		          targetfile="${binBCI}/.unpack-timestamp" />
		<antcall target="_unzipBCISource" />
	</target>

	<target name="clean"
	        description="Cleans all build files but keeps downloads (removes bin/ and dist/)">
		<delete includeEmptyDirs="true" failonerror="false" verbose="${verb}">
			<fileset dir="${bin}" />
			<fileset dir="${dist}" />
			<fileset dir="${extBuild}/xsltproc/bin" />
		</delete>
		<echo message="Downloaded external files are not deleted. 'ant mrproper' cleans all." />
	</target>

	<target name="mrproper"
	        description="Cleans all build and downloaded files (removes bin/, dist/ and ext/)">
		<delete includeEmptyDirs="true" failonerror="false" verbose="${verb}">
			<fileset dir="${bin}" />
			<fileset dir="${ext}" />
			<fileset dir="${dist}" />
		</delete>
	</target>

	<target name="fetch"
	        depends="_download-build, _download-ext"
	        description="Downloads files needed for building and during runtime (creates files in ext/)">
	</target>

	<target name="_buildCopy">
		<copy todir="${bin}"
		      overwrite="true"
		      preservelastmodified="true"
		      failonerror="true"
		      verbose="{verb}">
			<fileset dir="${src}">
				<include name="ExpressionParser/**" />
				<include name="GitLogHTML/**" />
				<include name="TCPIP-Simulator/**" />
				<include name="**/help/*.html" />
				<include name="**/help/*.png" />
				<include name="**/icons/*.png" />
			</fileset>
			<fileset dir="${srcBCI}/.." includes="${srcBCISub}/**" />
		</copy>
	</target>

	<target name="_buildVersion">
		<echo message="Writing GIT revision and date" />
		<exec executable="${src}/write-git-version.sh"
		      dir="${basedir}"
		      failonerror="true"
		      osfamily="unix">
			<arg value="${src}/pleocmd/itfc/cli/Version.java" />
		</exec>
		<exec executable="${src}/write-git-version.bat"
		      dir="${basedir}"
		      failonerror="true"
		      osfamily="windows">
			<arg value="${src}/pleocmd/itfc/cli/Version.java" />
		</exec>
	</target>

	<target name="_buildJava">
		<javac srcdir="${src}"
		       destdir="${bin}"
		       verbose="${verb}"
		       listfiles="true"
		       classpath="${classpath}"
		       includeantruntime="false"
		       updatedProperty="javaCodeWasCompiled" />
		<antcall target="_buildCheckstyle" />
	</target>

	<target name="_buildCheckstyle" if="javaCodeWasCompiled">
		<taskdef resource="checkstyletask.properties"
		         classpath="${lib}/checkstyle-all-5.1.jar" />
		<checkstyle config="${src}/checkstyle.xml" failonviolation="false">
			<fileset dir="${src}" includes="**/*.java" />
			<fileset dir="${test}" includes="**/*.java" />
			<classpath>
				<pathelement path="${bin}" />
			</classpath>
		</checkstyle>
	</target>

	<target name="_buildCAndCPP">
		<echo message="Building ExpressionParser" />
		<exec executable="make"
		      dir="${bin}/ExpressionParser"
		      failonerror="true"
		      osfamily="unix">
			<arg value="unix" />
		</exec>
		<exec executable="make"
		      dir="${bin}/ExpressionParser"
		      failonerror="true"
		      osfamily="windows">
			<arg value="win" />
		</exec>

		<echo message="Building TCPIP-Simulator" />
		<exec executable="make"
		      dir="${bin}/TCPIP-Simulator"
		      failonerror="true"
		      osfamily="unix">
			<arg value="unix" />
		</exec>
		<exec executable="make"
		      dir="${bin}/TCPIP-Simulator"
		      failonerror="true"
		      osfamily="windows">
			<arg value="win" />
		</exec>

		<echo message="Building GitLogHTML" />
		<exec executable="make"
		      dir="${bin}/GitLogHTML"
		      failonerror="true"
		      osfamily="unix">
			<arg value="unix" />
		</exec>
		<exec executable="make"
		      dir="${bin}/GitLogHTML"
		      failonerror="true"
		      osfamily="windows">
			<arg value="win" />
		</exec>

		<echo message="Building BCI-2000 modules" />
		<exec executable="make"
		      dir="${binBCINexus}"
		      failonerror="true"
		      osfamily="windows">
		</exec>
		<exec executable="make"
		      dir="${binBCIPleo}"
		      failonerror="true"
		      osfamily="windows">
		</exec>
	</target>

	<target name="_buildChangelog">
		<echo message="Creating GIT changelog" />
		<exec executable="git"
		      output="${bin}/changelog.git"
		      failonerror="true"
		      logerror="true"
		      osfamily="unix">
			<arg value="log" />
			<arg value="--date=iso" />
			<arg value="--numstat" />
			<arg value="--stat=10000,10000" />
			<arg value="--abbrev-commit" />
			<arg value="-M" />
			<arg value="-C" />
			<arg value="--color=never" />
		</exec>
		<exec executable="cmd"
		      output="${bin}/changelog.git"
		      failonerror="true"
		      logerror="true"
		      osfamily="windows">
			<arg value="/c" />
			<arg value="git.cmd" />
			<arg value="log" />
			<arg value="--date=iso" />
			<arg value="--numstat" />
			<arg value="--stat=10000,10000" />
			<arg value="--abbrev-commit" />
			<arg value="-M" />
			<arg value="-C" />
		</exec>
		<echo message="Converting GIT changelog to XML" />
		<exec executable="${bin}/GitLogHTML/GitLogHTML"
		      input="${bin}/changelog.git"
		      output="${bin}/changelog.xml"
		      failonerror="true"
		      logerror="true"
		      osfamily="unix">
		</exec>
		<exec executable="${bin}/GitLogHTML/GitLogHTML.exe"
		      input="${bin}/changelog.git"
		      output="${bin}/changelog.xml"
		      failonerror="true"
		      logerror="true"
		      osfamily="windows">
		</exec>
		<echo message="Converting XML to HTML" />
		<exec executable="xsltproc"
		      output="${bin}/changelog.html"
		      failonerror="false"
		      logerror="true">
			<arg value="${src}/changelog.xsl" />
			<arg value="${bin}/changelog.xml" />
		</exec>
		<copy todir="${bin}/pleocmd/itfc/gui/help"
		      overwrite="true"
		      preservelastmodified="true"
		      failonerror="false"
		      verbose="${verb}">
			<fileset file="${bin}/changelog.html" />
		</copy>
	</target>

	<!-- Compiles Java, C and C++ files, checks for errors and dumps GIT log -->
	<target name="build"
	        depends="_prepare-build"
	        description="Builds Java, C and C++ sourcecode from src/ (creates bin/)">
		<mkdir dir="${bin}" />
		<antcall target="_buildCopy" />
		<antcall target="_buildVersion" />
		<antcall target="_buildJava" />
		<antcall target="_buildCAndCPP" />
		<antcall target="_buildChangelog" />
	</target>

	<target name="_distTidyHTML">
		<exec executable="${src}/tidy-all-html.sh"
		      dir="${basedir}"
		      failonerror="true"
		      osfamily="unix">
			<arg value="${bin}/pleocmd/itfc/gui/help" />
			<arg value="${bin}/changelog.html" />
		</exec>
		<exec executable="${src}/tidy-all-html.bat"
		      dir="${basedir}"
		      failonerror="true"
		      osfamily="windows">
			<!-- location of tidy.exe must be first argument -->
			<arg value="${bin}" />
			<arg value="${bin}/pleocmd/itfc/gui/help" />
			<arg value="${bin}/changelog.html" />
		</exec>
	</target>

	<target name="_distCreateJAR">
		<delete file="${jarloc}" failonerror="true" verbose="${verb}" />
		<jar jarfile="${jarloc}" duplicate="fail" strict="warn">
			<zipfileset dir="${bin}/pleocmd" prefix="pleocmd" />
			<zipfileset src="${lib}/RXTXcomm.jar" />
			<manifest>
				<attribute name="Implementation-Vendor"
				           value="Oliver Hoffmann" />
				<attribute name="Implementation-Title"
				           value="${ant.project.name}" />
				<attribute name="Implementation-Version"
				           value="0.1 @ ${java.vm.name} ${os.name}-${os.version}" />
				<attribute name="Main-Class" value="${mainclass}" />
				<attribute name="Class-Path" value="." />
			</manifest>
		</jar>
	</target>

	<target name="_distCreateEXE">
		<property name="jsloc" value="${bin}/${ant.project.name}.jsmooth" />
		<echoxml file="${jsloc}">
			<jsmoothproject>
				<skeletonName>Windowed Wrapper</skeletonName>
				<minimumVersion>1.5</minimumVersion>
				<mainClassName>${mainclass}</mainClassName>

				<executableName>${exefile}</executableName>
				<iconLocation>../src/${ant.project.name}.ico</iconLocation>
				<classPath>${classpath}</classPath>

				<embeddedJar>true</embeddedJar>
				<jarLocation>${jarloc}</jarLocation>

				<maximumMemoryHeap>536870912</maximumMemoryHeap>

				<key>Message</key>
				<value>Java is needed. Do you want to download it now?</value>
				<key>URL</key>
				<value>http://www.java.com</value>
				<key>Debug</key>
				<value>0</value>
			</jsmoothproject>
		</echoxml>
		<taskdef name="jsmoothgen"
		         classname="net.charabia.jsmoothgen.ant.JSmoothGen"
		         classpath="${lib}/jsmoothgen-ant.jar" />
		<jsmoothgen skeletonroot="${lib}/skeletons"
		            verbose="${verb}"
		            project="${jsloc}" />
	</target>

	<target name="_distCopy">
		<copy todir="${dist}"
		      overwrite="true"
		      preservelastmodified="true"
		      failonerror="true"
		      verbose="${verb}">
			<fileset file="${src}/pleocommand" />
			<fileset file="${bin}/${exefile}" />
			<fileset file="${bin}/changelog.html" />
			<fileset file="${lib}/librxtxSerial.so" />
			<fileset file="${lib}/rxtxSerial.dll" />
		</copy>
		<copy todir="${dist}"
		      overwrite="true"
		      preservelastmodified="true"
		      failonerror="false"
		      verbose="${verb}">
			<fileset file="${bin}/ExpressionParser/libExprParser.so" />
			<fileset file="${bin}/ExpressionParser/ExprParser.dll" />
			<fileset file="${bin}/ExpressionParser/exprparser" />
			<fileset file="${bin}/ExpressionParser/exprparser.exe" />
		</copy>
		<copy todir="${extRT}/BCI2000-Prog/"
		      overwrite="true"
		      preservelastmodified="true"
		      failonerror="false"
		      verbose="${verb}">
			<fileset file="${binBCINexus}/NexusSource.exe" />
			<fileset file="${binBCIPleo}/PleoCommandTCPIP.exe" />
		</copy>
		<chmod perm="ugo+rx" failonerror="false" verbose="${verb}">
			<fileset file="${dist}/pleocommand" />
			<fileset file="${extRT}/BCI2000-Prog/NexusSource.exe" />
			<fileset file="${extRT}/BCI2000-Prog/PleoCommandTCPIP.exe" />
			<fileset file="${dist}/${exefile}" />
			<fileset file="${dist}/librxtxSerial.so" />
			<fileset file="${dist}/libExprParser.so" />
			<fileset file="${dist}/exprparser" />
			<fileset file="${dist}/exprparser.exe" />
		</chmod>
	</target>

	<target name="_distOSCheck">
		<uptodate property="buildok.linux"
		          targetfile="${dist}/libExprParser.so">
			<srcfiles dir="${src}/ExpressionParser" includes="*" />
		</uptodate>
		<uptodate property="buildok.win1" targetfile="${dist}/ExprParser.dll">
			<srcfiles dir="${src}/ExpressionParser" includes="*" />
		</uptodate>
		<uptodate property="buildok.win2"
		          targetfile="${extRT}/BCI2000-Prog/NexusSource.exe">
			<srcfiles dir="${srcBCINexus}" includes="*" />
		</uptodate>
		<uptodate property="buildok.win3"
		          targetfile="${extRT}/BCI2000-Prog/PleoCommandTCPIP.exe">
			<srcfiles dir="${srcBCIPleo}" includes="*" />
		</uptodate>
		<condition property="buildok.win">
			<and>
				<isset property="buildok.win1" />
				<isset property="buildok.win2" />
				<isset property="buildok.win3" />
			</and>
		</condition>
		<fail message="This script has be run again under Linux because some missing files have to be created under Linux. You may ignore this error if only Linux will be used."
		      unless="buildok.linux" />
		<fail message="This script has be run again under Windows because some missing files have to be created under Windows. You may ignore this error if only Windows will be used."
		      unless="buildok.win" />
	</target>

	<!-- Creates Java JAR archive and Windows executable in dist/ -->
	<target name="dist"
	        depends="build, _download-ext"
	        description="Finally prepares distribution for runtime (creates dist/)">
		<mkdir dir="${dist}" />
		<property name="jarloc" location="${dist}/${ant.project.name}.jar" />
		<property name="exefile" value="${ant.project.name}.exe" />
		<antcall target="_distTidyHTML" />
		<antcall target="_distCreateJAR" />
		<antcall target="_distCreateEXE" />
		<antcall target="_distCopy" />
		<antcall target="_distOSCheck" />
	</target>

	<!-- Executes all JUnit test cases -->
	<target name="test"
	        depends="dist"
	        description="Does internal testing via JUnit">
		<junit showoutput="true" failureproperty="testfailed">
			<classpath>
				<pathelement path="${lib}/junit.jar" />
				<pathelement path="${lib}/hamcrest-core.jar" />
				<pathelement path="${bin}" />
			</classpath>
			<formatter type="plain" usefile="false" />
			<batchtest>
				<fileset dir="${src}/test" includes="**/*.java" />
			</batchtest>
		</junit>
		<fail message="At least one JUnit test failed" if="testfailed" />
	</target>

	<target name="rebuild"
	        depends="clean, dist"
	        description="Forces a rebuild (removes and recreates bin/ and dist/)">
	</target>

</project>
