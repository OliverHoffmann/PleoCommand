<?xml version="1.0" encoding="UTF-8"?>
<project name="PleoCommand" default="build" basedir=".">

	<property name="verb" value="no" />

	<property name="src" location="src" />
	<property name="bin" location="bin" />
	<property name="lib" location="lib" />
	<property name="dist" location="dist" />
	<property name="test" location="test" />
	<property name="misc" location="misc" />
	<property name="install" location="installation" />

	<property name="jarfile" value="${ant.project.name}.jar" />
	<property name="jarloc" location="${dist}/${jarfile}" />
	<property name="exefile" value="${ant.project.name}.exe" />

	<property name="mainclass" value="pleocmd.Main" />
	<property name="classpath" value="${lib}/RXTXcomm.jar" />

	<!-- Define external tasks -->
	<taskdef resource="checkstyletask.properties"
	         classpath="${lib}/checkstyle-all-5.0.jar" />

	<taskdef name="jsmoothgen"
	         classname="net.charabia.jsmoothgen.ant.JSmoothGen"
	         classpath="${lib}/jsmoothgen-ant.jar" />

	<!-- Cleans bin/ and dist/ diretory -->
	<target name="clean">
		<delete dir="${bin}" verbose="${verb}" />
		<delete dir="${dist}" verbose="${verb}" />
		<exec executable="${install}/build.sh"
		      failonerror="true"
		      dir="${install}"
		      osfamily="unix">
			<arg value="clean" />
		</exec>
		<exec executable="cmd"
		      failonerror="true"
		      dir="${install}"
		      osfamily="windows">
			<arg value="/c" />
			<arg value="build.bat" />
			<arg value="from-ant" />
			<arg value="clean" />
		</exec>
		<exec executable="make"
		      dir="${misc}/ExpressionParser"
		      failonerror="true">
			<arg value="clean" />
		</exec>
		<exec executable="make"
		      dir="${misc}/TCPIP-Simulator"
		      failonerror="true">
			<arg value="clean" />
		</exec>
	</target>

	<!-- Creates class files, checks for errors and dumps subversion log in bin/ -->
	<target name="build">
		<mkdir dir="${bin}" />
		<mkdir dir="${dist}" />

		<javac srcdir="${src}"
		       destdir="${bin}"
		       verbose="${verb}"
		       classpath="${classpath}"
		       includeantruntime="false"
		       excludes="**/*.odg" />

		<checkstyle config="checkstyle.xml" failonviolation="false">
			<fileset dir="${src}" includes="**/*.java" />
			<fileset dir="${test}" includes="**/*.java" />
			<classpath>
				<pathelement path="${bin}" />
			</classpath>
		</checkstyle>

		<exec executable="svn" failonerror="false">
			<arg value="up" />
			<arg value="--non-interactive" />
		</exec>
		<exec executable="svn"
		      output="${bin}/changelog.xml"
		      failonerror="false">
			<arg value="log" />
			<arg value="-v" />
			<arg value="--xml" />
			<arg value="--non-interactive" />
		</exec>
		<exec executable="xsltproc"
		      output="${dist}/changelog.html"
		      failonerror="false">
			<arg value="svnlog.xsl" />
			<arg value="${bin}/changelog.xml" />
		</exec>
		<exec executable="make"
		      dir="${misc}/ExpressionParser"
		      failonerror="true"
		      osfamily="unix">
			<arg value="unix" />
		</exec>
		<exec executable="make"
		      dir="${misc}/ExpressionParser"
		      failonerror="true"
		      osfamily="windows">
			<arg value="win" />
		</exec>
		<exec executable="make"
		      dir="${misc}/TCPIP-Simulator"
		      failonerror="true"
		      osfamily="unix">
			<arg value="unix" />
		</exec>
		<exec executable="make"
		      dir="${misc}/TCPIP-Simulator"
		      failonerror="true"
		      osfamily="windows">
			<arg value="win" />
		</exec>
	</target>

	<!-- Executes all JUnit test cases -->
	<target name="test" depends="dist">
		<junit showoutput="true" failureproperty="testfailed">
			<classpath>
				<pathelement path="${lib}/junit.jar" />
				<pathelement path="${lib}/hamcrest-core.jar" />
				<pathelement path="${bin}" />
			</classpath>
			<formatter type="plain" usefile="false" />
			<batchtest>
				<fileset dir="${test}" includes="**/*.java" />
			</batchtest>
		</junit>
		<fail message="At least one JUnit test failed" if="testfailed" />
	</target>

	<!-- Creates Java JAR archive and Windows executable in dist/ -->
	<target name="dist" depends="build">
		<delete file="${jarloc}" verbose="${verb}" />
		<jar jarfile="${jarloc}" duplicate="fail" strict="warn">
			<zipfileset dir="${bin}/pleocmd" prefix="pleocmd" />
			<zipfileset src="${lib}/RXTXcomm.jar" />
			<manifest>
				<attribute name="Implementation-Vendor"
				           value="Oliver Hoffmann" />
				<attribute name="Implementation-Title"
				           value="${ant.project.name}" />
				<attribute name="Implementation-Version"
				           value="0.1 @ ${java.vm.name} ${os.name}-${os.version}" />
				<attribute name="Main-Class" value="${mainclass}" />
				<attribute name="Class-Path" value="." />
			</manifest>
		</jar>

		<property name="jsloc" value="${bin}/${ant.project.name}.jsmooth" />
		<echoxml file="${jsloc}">
			<jsmoothproject>
				<skeletonName>Windowed Wrapper</skeletonName>
				<minimumVersion>1.5</minimumVersion>
				<mainClassName>${mainclass}</mainClassName>

				<executableName>${exefile}</executableName>
				<iconLocation>../${ant.project.name}.ico</iconLocation>
				<classPath>${classpath}</classPath>

				<embeddedJar>true</embeddedJar>
				<jarLocation>${jarloc}</jarLocation>

				<maximumMemoryHeap>536870912</maximumMemoryHeap>

				<key>Message</key>
				<value>Java is needed. Do you want to download it now?</value>
				<key>URL</key>
				<value>http://www.java.com</value>
				<key>Debug</key>
				<value>0</value>
			</jsmoothproject>
		</echoxml>
		<jsmoothgen skeletonroot="${lib}/skeletons"
		            verbose="${verb}"
		            project="${jsloc}" />

		<copy todir="${dist}" verbose="${verb}">
			<fileset file="${bin}/${exefile}" />
			<fileset file="${lib}/pleocommand" />
			<fileset file="${lib}/librxtxSerial.so" />
			<fileset file="${lib}/rxtxSerial.dll" />
			<fileset file="${misc}/ExpressionParser/libExprParser.so" />
			<fileset file="${misc}/ExpressionParser/ExprParser.dll" />
		</copy>
		<chmod perm="ugo+rx" verbose="${verb}">
			<fileset file="${dist}/pleocommand" />
			<fileset file="${dist}/librxtxSerial.so" />
			<fileset file="${dist}/${exefile}" />
			<fileset file="${install}/build.sh" />
		</chmod>
		<exec executable="${install}/build.sh"
		      failonerror="true"
		      dir="${install}"
		      osfamily="unix">
		</exec>
		<exec executable="cmd"
		      failonerror="true"
		      dir="${install}"
		      osfamily="windows">
			<arg value="/c" />
			<arg value="build.bat" />
			<arg value="from-ant" />
		</exec>
	</target>

	<target name="rebuild" depends="clean, build, dist">
	</target>

</project>
